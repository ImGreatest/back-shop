// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id String @id @default(uuid())
  name String
  createdAt        DateTime     @default(now()) @db.Timestamptz(3)
  updatedAt        DateTime     @updatedAt @db.Timestamptz(3)
  deletedAt        DateTime? @db.Timestamptz(3)

  categoryProducs CategoryProduct[]
}

model Product {
  id String @id @default(uuid())
  name String
  description String?
  price Float
  count Int
  createdAt        DateTime     @default(now()) @db.Timestamptz(3)
  updatedAt        DateTime     @updatedAt @db.Timestamptz(3)
  deletedAt        DateTime? @db.Timestamptz(3)

  userBucket UserBucket[]
  categoryProducs CategoryProduct[]
  productSizes ProductSize[]
}

model Sizes {
  id String @id @default(uuid())
  name String
  createdAt        DateTime     @default(now()) @db.Timestamptz(3)
  updatedAt        DateTime     @updatedAt @db.Timestamptz(3)
  deletedAt        DateTime? @db.Timestamptz(3)

  productSizes ProductSize[]
}

model ProductSize {
  productId String
  product Product @relation(fields: [productId], references: [id])
  sizeId String
  size Sizes @relation(fields: [sizeId], references: [id])
  availability Boolean
  @@id([productId, sizeId])
}

enum ERoleUser {
  admin
  manager
  client
}

model User {
  id String @id @default(uuid())
  fullname String
  role ERoleUser @default(client)
  login String
  password String
  phone String
  createdAt        DateTime     @default(now()) @db.Timestamptz(3)
  updatedAt        DateTime     @updatedAt @db.Timestamptz(3)
  deletedAt        DateTime? @db.Timestamptz(3)

  userBucket UserBucket[]
  refreshToken RefreshToken[]
}


model RefreshToken {
  token       String
  deviceId    String
  user        User     @relation(fields: [userId], references: [id])
  userId      String      @db.VarChar()
  created_at  DateTime @default(now())
  expieres_at DateTime

  @@id([token, deviceId])
}

model UserBucket {
  userId String
  user User @relation(fields: [userId], references: [id])
  productId String
  product Product @relation(fields: [productId], references: [id])
  count Int
  @@id([userId, productId])
}

model CategoryProduct {
  categoryId String
  category Category @relation(fields: [categoryId], references: [id])
  productId String
  product Product @relation(fields: [productId], references: [id])
  @@id([categoryId, productId])
}
